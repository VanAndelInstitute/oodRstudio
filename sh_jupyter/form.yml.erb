<%-
# get Python modules
  m_cmd = "bash -il -c 'module -t avail bbc2/python3/ |& grep python3 |& sort -r' 2>/dev/null"
  begin
    output, status = Open3.capture2e(m_cmd)
    if status.success?
      _list_r_versions = output.split("\n").map(&:strip).reject(&:blank?).sort
    else
      raise output
    end
  rescue => e
    _list_r_versions = []
    m_error = e.message.strip
  end
-%>
---
cluster: "hpc"

form:
  - sh_python_version
  - sh_extra_jupyter_args
  - sh_modules
  - sh_partition
  - sh_cpus
#  - sh_gpus
  - sh_mem
  - bc_num_hours
  - bc_email_on_started

attributes:
  sh_python_version:
    label: "Python version"
    <%- if m_error -%>
      <span class="text-danger">Error when parsing module versions:</span>
      ```
      <%= m_error.gsub("\n", "\n      ") %>
      ```
    <%- end -%>
    <%- if _list_r_versions.blank? -%>
    widget: text_field
    <%- else -%>
    widget: select
    options:
      <%- _list_r_versions.each do |q| -%>
      - [ "<%= q %>", "<%= q %>" ]
      <%- end -%>
    <%- end -%>

  sh_modules:
    label: "Additional modules (optional)"
    help: |
        <small>Space separated list of additional modules to load 

  sh_extra_jupyter_args:
    label: "Extra Jupyter arguments (optional)"

  sh_partition:
    label: "Partition"
    value: "short"
    required: true
    help: "For example: quick short bigmem long, or your private nodes."

  sh_cpus:
    label: "#CPUs"
    widget: "number_field"
    help: "<small>Number of CPU cores to allocate</small>"
    required: true
    min: 1
    value: "1"


  sh_gpus:
    label: "#GPUs (optional)"
    widget: "number_field"
    help: "<small>Number of GPUs to allocate (don't forget to load the `cuda` module in the `Modules` field above and to select a partition with GPUs)</small>"
    min: 1
    max: 8
    value: ""

  sh_mem:
    label: "Memory (GB) (optional)"
    widget: "number_field"
    help: "<small>Amount of memory to allocate</small>"

  bc_num_hours:
    label: "Runtime (in hours)"
